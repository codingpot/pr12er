// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/handlers/gh/gh.go

// Package mock_gh is a generated GoMock package.
package mock_gh

import (
	gh "github.com/codingpot/pr12er/server/pkg/handlers/gh"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGitHubService is a mock of GitHubService interface
type MockGitHubService struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubServiceMockRecorder
}

// MockGitHubServiceMockRecorder is the mock recorder for MockGitHubService
type MockGitHubServiceMockRecorder struct {
	mock *MockGitHubService
}

// NewMockGitHubService creates a new mock instance
func NewMockGitHubService(ctrl *gomock.Controller) *MockGitHubService {
	mock := &MockGitHubService{ctrl: ctrl}
	mock.recorder = &MockGitHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHubService) EXPECT() *MockGitHubServiceMockRecorder {
	return m.recorder
}

// CreateIssue mocks base method
func (m *MockGitHubService) CreateIssue(title, body string, labels []string) (*gh.GitHubIssue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", title, body, labels)
	ret0, _ := ret[0].(*gh.GitHubIssue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssue indicates an expected call of CreateIssue
func (mr *MockGitHubServiceMockRecorder) CreateIssue(title, body, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockGitHubService)(nil).CreateIssue), title, body, labels)
}
